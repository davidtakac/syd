#!/usr/bin/env python
import PySimpleGUI as sg
import youtube_dl
import os
import threading
import subprocess
import platform

class Syd:
    APP_NAME = 'syd-music'
    #manual events
    ON_BEGIN = 'event-begin'
    ON_PROGRESS = 'event-dl-progress'
    ON_CONVERT_BEGIN = 'event-convert-begin'
    ON_CONVERT_END = 'event-convert-end'
    ON_ERROR = 'event-error'
    BTN_DL_ENABLED = 'event-dl-enabled'
    #menu strings and also event keys
    PASTE = 'Paste'
    CLEAR = 'Clear'
    #view keys
    BTN_DL = 'event-download'
    BTN_VIEW = 'event-view'
    INPUT_URL = 'url'
    LABEL_STATUS = 'status'
    #other constants
    TRUNC_SIZE = 24

    def start(self):
        while True: 
            event, values = self._window.read()
            if event == self.BTN_DL:
                self._download(values[self.INPUT_URL])
            elif event == self.BTN_DL_ENABLED:
                self._window[self.BTN_DL].update(disabled=not values[event])
            elif event == self.LABEL_STATUS:
                self._window[self.LABEL_STATUS].update(values[event])
            elif event == self.BTN_VIEW:
                self._open_file(self._dl_path)
            elif event == self.PASTE:
                self._on_paste()
            elif event == self.CLEAR:
                self._on_clear()
            elif event == sg.WINDOW_CLOSED:
                break
            else: 
                print(event)

        self._window.close()

    def __init__(self):
        self._init_gui()
        self._init_ytdl()
        
    def _init_gui(self):
        sg.theme('LightGreen')
        menu = [
            ['Edit', [self.PASTE, self.CLEAR]],
        ]
        layout = [ 
            [sg.Menu(menu)],
            [sg.Text('YouTube link')],
            [sg.InputText(key=self.INPUT_URL)], 
            [sg.Button('Download MP3', key=self.BTN_DL, bind_return_key=True), sg.Button('View downloaded songs', key=self.BTN_VIEW)], 
            [sg.Text(key=self.LABEL_STATUS, size=(36,1))]
        ]
        self._window = sg.Window(self.APP_NAME, layout)

    def _init_ytdl(self):
        self._dl_path = '{}/Music/{}/'.format(os.environ['HOME'], self.APP_NAME)
        self._outtmpl_singles = '{}%(title)s.%(ext)s'.format(self._dl_path)
        self._outtmpl_playlist = '{}%(playlist)s/%(title)s.%(ext)s'.format(self._dl_path)
        params = {
            #outtmpl is set based on if playlist or not
            'format': 'bestaudio/best',
            'quiet': True,
            'progress_hooks': [self._dl_progress_hook],
            'postprocessors': [{
                'key': 'FFmpegExtractAudio',
                'preferredcodec': 'mp3',
                'preferredquality': '128',
            }],
        }
        self._ytdl = youtube_dl.YoutubeDL(params)

    def _download(self, url):
        threading.Thread(
            target=self._dl_worker, 
            args=(url,), 
            daemon=True
        ).start()

    def _event(self, key, value=any):
        self._window.write_event_value(key, value)
    
    def _update_outtmpl(self, isPlaylist):
        self._ytdl.params.update(
            {'outtmpl': self._outtmpl_playlist if isPlaylist else self._outtmpl_singles}
        )

    def _dl_worker(self, url):
        self._on_begin()
        try:
            info = self._ytdl.extract_info(url, download=False)
            self._update_outtmpl('entries' in info)
            self._ytdl.download([url])
        except:
            self._on_error()
        else:
            self._on_convert_end()

    def _dl_progress_hook(self, prog):
        status = prog['status']
        if status == 'downloading':
            self._on_progress_update(prog)
        if status == 'finished':
            self._on_progress_finished(prog)

    def _on_begin(self):
        self._event(self.BTN_DL_ENABLED, False)
        self._event(self.LABEL_STATUS, 'Extracting info…')

    def _on_progress_update(self, prog):
        video_name = self._truncate_filename(prog['filename'], self.TRUNC_SIZE)
        status_str = '"{}" {}'.format(video_name, prog['_percent_str'])
        self._event(self.LABEL_STATUS, status_str)

    def _on_progress_finished(self, prog):
        video_name = self._truncate_filename(prog['filename'], self.TRUNC_SIZE)
        status_str = '"{}" to MP3…'.format(video_name)
        self._event(self.LABEL_STATUS, status_str)

    def _truncate_filename(self, filename, trunc_size):
        #get filename without path
        video_name = os.path.basename(filename)
        #remove extension
        video_name = os.path.splitext(video_name)[0]
        #truncate video name
        if len(video_name) > trunc_size: 
            video_name = video_name[:trunc_size] + '…'
        return video_name

    def _on_error(self):
        self._event(self.LABEL_STATUS, 'Error, check your link.')
        self._event(self.BTN_DL_ENABLED, True)

    def _on_convert_end(self):
        self._event(self.LABEL_STATUS, 'Done!')
        self._event(self.BTN_DL_ENABLED, True)

    #todo: these guys
    def _on_paste(self):
        pass

    def _on_clear(self):
        pass

    def _open_file(self, file_path):
        system = platform.system()
        if system == 'Windows':
            os.startfile(file_path)
        elif system == 'Linux':
            subprocess.Popen(['xdg-open', file_path])
        elif system == 'Darwin':
            subprocess.Popen(['open', file_path])
        else:
            self._event(self.LABEL_STATUS, 'Can\'t open destination.')

if __name__ == '__main__':
    Syd().start()